openapi: 3.0.3
info:
  title: User API
  description: A User API that provides User creation, retrival and User's avatar retrival and deletion
  version: 0.0.1
tags:
  - name: user
    description: User record
  - name: avatar
    description: Avatar for an user
paths:
  /api/users:
    post:
      tags:
        - user
      summary: Create an User
      description: |-
        On the request store the user entry in db. After the creation, send an email and rabbit event. Both can be dummy sending (no consumer needed).
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '201':
          description: User created Succesfully
        '400':
          description: Bad request
        '500':
          description: Internal Server error
      security:
        - api_auth:
            - user:write

  /api/user/{userId}:
    get:
      tags:
        - user
      summary: Retrieve User by its id
      description: |-
        Retrieves data from https://reqres.in/api/users/{userId} and returns a user in JSON representation.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: User database identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '404':
          description: User doesn't exists
        '500':
          description: Internal Server error
      security:
        - api_auth:
          - user:read

  /api/user/{userId}/avatar:
    get:
      tags:
        - avatar
      summary: Get User's Avatar
      description: |-
        Retrieves image by 'avatar' URL.
        On the first request it should save the image as a plain file, stored as a mongodb entry with userId and hash. Return its base64-encoded representation.
        On following requests should return the previously saved file in base64-encoded. representation (retrieve from db).
      operationId: getUserAvatar
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
               schema:
                type: string
        '404':
          description: User or avatar doesn't exists
        '500':
          description: Internal Server error
      security:
        - api_auth:
            - avatar:read
    delete:
      tags:
        - avatar
      summary: Delete User's Avatar
      description: |-
        Removes the file from the FileSystem storage.
        Removes the stored entry from db.

      operationId: deleteUserAvatar
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successful operation
        '404':
          description: User or avatar doesn't exists
        '500':
          description: Internal Server error
      security:
        - api_auth:
            - avatar:write
  
components:
  schemas:
    UserBase:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      
    UserRequest:
      allOf:
        - $ref: '#/components/schemas/UserBase'

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            userId:
              type: string

    AvatarResponse:
      type: object
      properties:
        url:
          type: string
        

  securitySchemes:
    api_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost/oauth/authorize
          scopes:
            user:write: create and modify user
            user:read: read user data
            avatar:read: read avatar data